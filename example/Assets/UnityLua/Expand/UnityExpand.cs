using System;
using System.Text;
using NLua;
using LuaCore  = KeraLua.Lua;
using LuaState = KeraLua.LuaState;
using LuaNativeFunction = KeraLua.LuaNativeFunction;

namespace UnityLua
{
	public class UnityExpand
	{
		public delegate UnityEngine.Object LoadAssetDelegate(string path);
		public static LoadAssetDelegate LoadAsset = UnityEngine.Resources.Load;

		static LuaNativeFunction PrintFunction;
		static LuaNativeFunction ReadFileFunction;

		public static void Open(Lua lua, string[] assemblys = null)
		{
			if (PrintFunction == null)
				PrintFunction = new LuaNativeFunction(Print);

			LuaLib.LuaPushStdCallCFunction(lua.LuaState, PrintFunction);
			LuaLib.LuaSetGlobal(lua.LuaState, "print");
			
			if (ReadFileFunction == null)
				ReadFileFunction = new LuaNativeFunction(ReadFile);

			LuaLib.LuaPushStdCallCFunction(lua.LuaState, ReadFileFunction);
			LuaLib.LuaSetGlobal(lua.LuaState, "readfile");

			StringBuilder sb = new StringBuilder(@"
				import 'System'
				import 'UnityEngine'
				import 'Assembly-CSharp'	-- The user-code assembly generated by Unity.
			");

			if (assemblys != null)
			{
				foreach(var assembly in assemblys)
				{
					sb.AppendFormat("import \'{0}\'\n", assembly);
				}
			}
			LuaLib.LuaLDoString(lua.LuaState, sb.ToString());
		}

		[MonoPInvokeCallback (typeof (LuaNativeFunction))]
		static int Print(LuaState luaState)
		{
			// For each argument we'll 'tostring' it
			int n = LuaLib.LuaGetTop(luaState);
			var sb = new StringBuilder("Lua:");
			
			LuaLib.LuaGetGlobal(luaState, "tostring");
			
			for( int i = 1; i <= n; i++ ) 
			{
				LuaLib.LuaPushValue(luaState, -1);  /* function to be called */
				LuaLib.LuaPushValue(luaState, i);   /* value to print */
				LuaLib.LuaPCall(luaState, 1, 1, 0);

				var s = LuaLib.LuaToString(luaState, -1);
				sb.Append(s);
					
				if(i > 1) 
				{
					sb.Append("\t");
				}
				
				LuaLib.LuaPop(luaState, 1);  /* pop result */
			}
			UnityEngine.Debug.Log(sb.ToString());
			return 0;
		}

		[MonoPInvokeCallback (typeof (LuaNativeFunction))]
		static int ReadFile(LuaState luaState)
		{
			string fileName = LuaLib.LuaToString(luaState, 1);
			var file = LoadAsset(fileName) as UnityEngine.TextAsset;
			if(file == null)
				return 0;
			
			LuaLib.LuaPushString(luaState, file.bytes);
            return 1;
		}
	}
}