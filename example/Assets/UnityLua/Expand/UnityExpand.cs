using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Reflection;
using System.Threading;
using System.Text;
using NLua;
using LuaCore  = KeraLua.Lua;
using LuaState = KeraLua.LuaState;
using LuaNativeFunction = KeraLua.LuaNativeFunction;

namespace UnityLua
{
	public class UnityExpand
	{
		public delegate UnityEngine.Object LoadAssetDelegate(string path);
		public static LoadAssetDelegate LoadAsset = UnityEngine.Resources.Load;

		static LuaNativeFunction PrintFunction;
		static LuaNativeFunction LoadFileFunction;
		static LuaNativeFunction LoaderFunction;

		public static void Open(LuaState luaState, string[] assemblys = null)
		{
			if (PrintFunction == null)
				PrintFunction = new LuaNativeFunction(Print);
			
			if (LoadFileFunction == null)
				LoadFileFunction = new LuaNativeFunction(LoadFile);

			LuaLib.LuaPushStdCallCFunction(luaState, PrintFunction);
			LuaLib.LuaSetGlobal(luaState, "print");

			LuaLib.LuaPushStdCallCFunction(luaState, LoadFileFunction);
			LuaLib.LuaSetGlobal(luaState, "loadfile");

			StringBuilder sb = new StringBuilder(@"
				import 'System'
				import 'UnityEngine'
				import 'Assembly-CSharp'	-- The user-code assembly generated by Unity.
			");

			if (assemblys != null)
			{
				foreach(var assembly in assemblys)
				{
					sb.AppendFormat("import \'{0}\'\n", assembly);
				}
			}
			LuaLib.LuaLDoString(luaState, sb.ToString());
		}

		[MonoPInvokeCallback (typeof (LuaNativeFunction))]
		static int Print(LuaState luaState)
		{
			// For each argument we'll 'tostring' it
			int n = LuaLib.LuaGetTop(luaState);
			var sb = new StringBuilder("Lua:");
			
			LuaLib.LuaGetGlobal(luaState, "tostring");
			
			for( int i = 1; i <= n; i++ ) 
			{
				LuaLib.LuaPushValue(luaState, -1);  /* function to be called */
				LuaLib.LuaPushValue(luaState, i);   /* value to print */
				LuaLib.LuaPCall(luaState, 1, 1, 0);

				var s = LuaLib.LuaToString(luaState, -1);
				sb.Append(s);
					
				if(i > 1) 
				{
					sb.Append("\t");
				}
				
				LuaLib.LuaPop(luaState, 1);  /* pop result */
			}
			UnityEngine.Debug.Log(sb.ToString());
			return 0;
		}

		[MonoPInvokeCallback (typeof (LuaNativeFunction))]
		public static int LoadFile(LuaState luaState)
		{
			// Get script to load
			string fileName = LuaLib.LuaToString(luaState, 1);
			fileName = fileName.Replace('.', '/');
			fileName += ".lua";

			string mode = LuaLib.LuaToString(luaState, 2);
			
			// Load with Unity3D resources
			var file = (UnityEngine.TextAsset)LoadAsset(fileName);
			if( file == null )
				return 0;
			
			var buff = file.bytes;
			LuaLib.LuaLLoadBuffer(luaState, buff, fileName, mode);
			return 1;
		}
	}
}